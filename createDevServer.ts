/*!
 * Copyright Microsoft Corporation. All rights reserved.
 */

"use strict";

import * as webpack from "webpack";
import * as WebpackDevServer from "webpack-dev-server";
const { createCompiler, prepareProxy, prepareUrls } = require("react-dev-utils/WebpackDevServerUtils");
import { argv } from "yargs";

import { paths } from "../paths";
const config = require("../webpack.config.dev");
const createDevServerConfig = require("../webpackDevServer.config");

const appName = "electric-boogaloo";
const host = "0.0.0.0";

export const readyAnnouncement = "Starting the development server";

export interface ICreatedDevServerInfo {
    baseUrl: string;
    devServer: WebpackDevServer;
    host: string;
    port: number;
    urls: {
        localUrlForBrowser: string;
    };
}

/**
 * Default port if not passed through the CLI.
 */
const defaultPort = 3000;

/**
 * @returns Port to suffix test dev server base URLs with.
 * @remarks Defaults to --port={port}.
 */
export const getDevServerPort = (): number => {
    return argv.port === undefined
        ? defaultPort
        : argv.port;
};

/**
 * Calculates the base URL for a local test dev server with its port.
 *
 * @param port   Port to suffix with, if not retrieved from argv.
 * @returns Base URL for a local test dev server, excluding protocol.
 */
export const getDevServerBaseUrl = (port: number = getDevServerPort()): string => {
    return `localhost:${port}`;
};

/**
 * Creates a localhost Webpack dev server.
 *
 * @returns   Promise for the dev server and associated host settings.
 */
export const createDevServer = async (): Promise<ICreatedDevServerInfo> => {
    // Load SSL certificate and URLs
    const port = getDevServerPort();
    const urls = prepareUrls("http", host, port);

    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, appName, urls);

    // Load proxy config
    const proxyConfig = prepareProxy(undefined /* proxySetting */, paths.appPublic);

    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
        proxyConfig,
        urls.lanUrlForConfig,
    );

    const devServer = new WebpackDevServer(compiler, serverConfig);
    const baseUrl = `http://${getDevServerBaseUrl(port)}`;

    return { baseUrl, devServer, host, port, urls };
};
